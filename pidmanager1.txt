#include<iostream>

#include<stdlib.h>



#define MIN_PID 300

#define MAX_PID 5000

#define TRUE 1

#define FALSE 0

using namespace std;



struct tab_pid{

int value_pid;

int is_avail;

}*pid_obj;



int allocate_map(void)

{



int k;



pid_obj=(struct tab_pid *)calloc((MAX_PID-MIN_PID+1),sizeof(struct tab_pid));



if(pid_obj==NULL)

return -1;



pid_obj[0].value_pid=MIN_PID;



pid_obj[0].is_avail=TRUE;



for( k=1;k<MAX_PID-MIN_PID+1;k++)

{



pid_obj[k].value_pid=pid_obj[k-1].value_pid+1;

pid_obj[k].is_avail=TRUE;

}



return 1;

}



int allocate_pid(void)

{



int k ;



for( k=0;k<MAX_PID-MIN_PID+1;k++)

{



if(pid_obj[k].is_avail==TRUE)

{



pid_obj[k].is_avail=FALSE;



return pid_obj[k].value_pid;

}

}



if(k==MAX_PID-MIN_PID+1)



return -1;

}



void release_pid(int pid){

pid_obj[pid-MIN_PID].is_avail=TRUE;

}



int main()

{

//Declare a variable

int process;

//Calling method

allocate_map();

//"if" loop for validation

if((process=allocate_pid())!=-1);

//Display statement

cout<<"The new process allocated ="<<process<<endl;

//"if" loop for validation

if((process=allocate_pid())!=-1);

//Display statement

cout<<"The new process allocated ="<<process<<endl;

//"if" loop for validation

if((process=allocate_pid())!=-1);

//Display statement

cout<<"The new process allocated ="<<process<<endl;

//"if" loop for validation

if((process=allocate_pid())!=-1);

//Display statement

cout<<"The new process allocated ="<<process<<endl;

//Display statement

cout<<"Process releasing = "<< process <<endl;

//Calling process

release_pid(process);

//"if" loop for validation

if((process=allocate_pid())!=-1);

//Display statement

cout<<"The new process allocated ="<<process<<endl;

//Returns the value 0

return 0;

}
