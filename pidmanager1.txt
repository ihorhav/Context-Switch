#include<iostream>

#include<stdlib.h>

//Assign constant value

#define MIN_PID 300

#define MAX_PID 5000

#define TRUE 1

#define FALSE 0

using namespace std;

//Declare the struct named "tab_pid"

struct tab_pid{

int value_pid;

int is_avail;

}*pid_obj;

//Declare the function

int allocate_map(void)

{

//Declare the variables

int k;

//Assign "pid_obj" value

pid_obj=(struct tab_pid *)calloc((MAX_PID-MIN_PID+1),sizeof(struct tab_pid));

//"if" loop for verification

if(pid_obj==NULL)

return -1;

//Assignment statement

pid_obj[0].value_pid=MIN_PID;

//Assignment statement

pid_obj[0].is_avail=TRUE;

//"for" loop until "MAX_PID-MIN_PID+1"

for( k=1;k<MAX_PID-MIN_PID+1;k++)

{

////Assignment statement

pid_obj[k].value_pid=pid_obj[k-1].value_pid+1;

pid_obj[k].is_avail=TRUE;

}

//Returns the value 1

return 1;

}

//Declare a function

int allocate_pid(void)

{

//Declare a variables

int k ;

//for loop until "MAX_PID-MIN_PID+1"

for( k=0;k<MAX_PID-MIN_PID+1;k++)

{

//"if" loop for validation

if(pid_obj[k].is_avail==TRUE)

{

//Assignment statement

pid_obj[k].is_avail=FALSE;

//Returns the value

return pid_obj[k].value_pid;

}

}

//"if" loop

if(k==MAX_PID-MIN_PID+1)

//Returns the value -1

return -1;

}

//Declare a function "release_pid"

void release_pid(int pid){

pid_obj[pid-MIN_PID].is_avail=TRUE;

}

//main method

int main()

{

//Declare a variable

int process;

//Calling method

allocate_map();

//"if" loop for validation

if((process=allocate_pid())!=-1);

//Display statement

cout<<"The new process allocated ="<<process<<endl;

//"if" loop for validation

if((process=allocate_pid())!=-1);

//Display statement

cout<<"The new process allocated ="<<process<<endl;

//"if" loop for validation

if((process=allocate_pid())!=-1);

//Display statement

cout<<"The new process allocated ="<<process<<endl;

//"if" loop for validation

if((process=allocate_pid())!=-1);

//Display statement

cout<<"The new process allocated ="<<process<<endl;

//Display statement

cout<<"Process releasing = "<< process <<endl;

//Calling process

release_pid(process);

//"if" loop for validation

if((process=allocate_pid())!=-1);

//Display statement

cout<<"The new process allocated ="<<process<<endl;

//Returns the value 0

return 0;

}