#include <iostream>
#include <cstdlib>
#include <cstring>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

const int MAX_ARGS = 10;
const int MAX_ARG_LENGTH = 100;

void runContainer(const char* containerName, const char* application, char* const* arguments) {
    pid_t pid = fork();
    if (pid == -1) {
        std::cerr << "Failed to fork process." << std::endl;
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process
        if (execvp(application, arguments) == -1) {
            std::cerr << "Failed to execute the application." << std::endl;
            exit(EXIT_FAILURE);
        }
    } else {
        // Parent process
        int status;
        if (waitpid(pid, &status, 0) == -1) {
            std::cerr << "Error occurred while waiting for the child process." << std::endl;
            exit(EXIT_FAILURE);
        }
    }
}

int main(int argc, char* argv[]) {
    if (argc < 3) {
        std::cout << "Usage: " << argv[0] << " container_name application [args...]" << std::endl;
        return 0;
    }

    const char* containerName = argv[1];
    const char* application = argv[2];

    char* arguments[MAX_ARGS];
    for (int i = 0; i < MAX_ARGS; ++i) {
        arguments[i] = nullptr;
    }

    if (argc > 3) {
        for (int i = 3; i < argc && i - 3 < MAX_ARGS; ++i) {
            arguments[i - 3] = argv[i];
        }
    }

    runContainer(containerName, application, arguments);

    return 0;
}