#include <iostream>
#include <vector>
#include <cstdlib>
#include <pthread.h>
#include <unistd.h>

#define MIN_PID 300
#define MAX_PID 5000
#define NUM_THREADS 100

int allocate_map();
int allocate_pid();
void release_pid(int pid);
void *test_pid_manager(void *arg);

std::vector<bool> pid_map;
pthread_mutex_t pid_map_mutex;

int main() {
    // Initialize PID manager
    if (allocate_map() == -1) {
        std::cerr << "Failed to allocate PID map\n";
        return -1;
    }

    // Create threads to test PID manager
    pthread_t threads[NUM_THREADS];
    for (int i = 0; i < NUM_THREADS; i++) {
        if (pthread_create(&threads[i], NULL, test_pid_manager, NULL)) {
            std::cerr << "Error creating thread " << i << std::endl;
            return -1;
        }
    }

    // Wait for threads to finish
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    return 0;
}

int allocate_map() {
    pid_map.resize(MAX_PID - MIN_PID + 1, false);
    return (pid_map.empty() ? -1 : 1);
}

int allocate_pid() {
    pthread_mutex_lock(&pid_map_mutex);
    for (int i = MIN_PID; i <= MAX_PID; i++) {
        if (!pid_map[i - MIN_PID]) {
            pid_map[i - MIN_PID] = true;
            pthread_mutex_unlock(&pid_map_mutex);
            return i;
        }
    }
    pthread_mutex_unlock(&pid_map_mutex);
    return -1;
}

void release_pid(int pid) {
    pthread_mutex_lock(&pid_map_mutex);
    pid_map[pid - MIN_PID] = false;
    pthread_mutex_unlock(&pid_map_mutex);
}

void *test_pid_manager(void *arg) {
    int pid = allocate_pid();
    if (pid == -1) {
        std::cerr << "Failed to allocate PID\n";
        return NULL;
    }
    std::cout << "Thread " << pthread_self() << " allocated PID " << pid << std::endl;
    int sleep_time = rand() % 10 + 1;
    sleep(sleep_time);
    release_pid(pid);
    std::cout << "Thread " << pthread_self() << " released PID " << pid << std::endl;
    return NULL;
}
